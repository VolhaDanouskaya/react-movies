{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar MoviesService = function MoviesService() {\n  var _this = this;\n\n  _classCallCheck(this, MoviesService);\n\n  _defineProperty(this, \"apiURL\", 'http://localhost:4000/movies/');\n\n  _defineProperty(this, \"fetchMovies\", function (filter, sort, query) {\n    return fetch(_this.buildUrl(filter, sort, query)).then(function (res) {\n      return res.json();\n    });\n  });\n\n  _defineProperty(this, \"getMovieById\", function (movieId) {\n    return fetch(_this.apiURL + movieId).then(function (res) {\n      return res.json();\n    });\n  });\n\n  _defineProperty(this, \"addMovie\", function (movie) {\n    return fetch(_this.apiURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(movie)\n    }).then(function (res) {\n      return res.json();\n    });\n  });\n\n  _defineProperty(this, \"updateMovie\", function (movie) {\n    return fetch(_this.apiURL, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(movie)\n    });\n  });\n\n  _defineProperty(this, \"deleteMovie\", function (id) {\n    return fetch(_this.apiURL + id, {\n      method: 'DELETE'\n    });\n  });\n\n  _defineProperty(this, \"buildUrl\", function (filter, sort, query) {\n    var url = \"\".concat(_this.apiURL, \"?sortBy=\").concat(sort, \"&sortOrder=desc\");\n\n    if (filter && filter !== 'All') {\n      url += \"?filter=\".concat(filter);\n    }\n\n    if (query) {\n      url += \"&search=\".concat(query, \"&searchBy=title\");\n    }\n\n    return url;\n  });\n};\n\nexport default new MoviesService();","map":{"version":3,"sources":["C:/projects/react-trainings/react-movies/src/services/MoviesService.js"],"names":["MoviesService","filter","sort","query","fetch","buildUrl","then","res","json","movieId","apiURL","movie","method","headers","body","JSON","stringify","id","url"],"mappings":";;;IAAMA,a;;;;;kCACK,+B;;uCAEK,UAACC,MAAD,EAASC,IAAT,EAAeC,KAAf;AAAA,WACZC,KAAK,CAAC,KAAI,CAACC,QAAL,CAAcJ,MAAd,EAAsBC,IAAtB,EAA4BC,KAA5B,CAAD,CAAL,CAA0CG,IAA1C,CAA+C,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KAA/C,CADY;AAAA,G;;wCAGC,UAACC,OAAD;AAAA,WACbL,KAAK,CAAC,KAAI,CAACM,MAAL,GAAcD,OAAf,CAAL,CAA6BH,IAA7B,CAAkC,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KAAlC,CADa;AAAA,G;;oCAGJ,UAACG,KAAD;AAAA,WACTP,KAAK,CAAC,KAAI,CAACM,MAAN,EAAc;AACjBE,MAAAA,MAAM,EAAE,MADS;AAEjBC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFQ;AAKjBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,KAAf;AALW,KAAd,CAAL,CAMGL,IANH,CAMQ,UAACC,GAAD;AAAA,aAASA,GAAG,CAACC,IAAJ,EAAT;AAAA,KANR,CADS;AAAA,G;;uCASG,UAACG,KAAD;AAAA,WACZP,KAAK,CAAC,KAAI,CAACM,MAAN,EAAc;AACjBE,MAAAA,MAAM,EAAE,KADS;AAEjBC,MAAAA,OAAO,EAAE;AACP,wBAAgB;AADT,OAFQ;AAKjBC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,KAAf;AALW,KAAd,CADO;AAAA,G;;uCASA,UAACM,EAAD;AAAA,WAAQb,KAAK,CAAC,KAAI,CAACM,MAAL,GAAcO,EAAf,EAAmB;AAAEL,MAAAA,MAAM,EAAE;AAAV,KAAnB,CAAb;AAAA,G;;oCAEH,UAACX,MAAD,EAASC,IAAT,EAAeC,KAAf,EAAyB;AAClC,QAAIe,GAAG,aAAM,KAAI,CAACR,MAAX,qBAA4BR,IAA5B,oBAAP;;AACA,QAAID,MAAM,IAAIA,MAAM,KAAK,KAAzB,EAAgC;AAC9BiB,MAAAA,GAAG,sBAAejB,MAAf,CAAH;AACD;;AACD,QAAIE,KAAJ,EAAW;AACTe,MAAAA,GAAG,sBAAef,KAAf,oBAAH;AACD;;AACD,WAAOe,GAAP;AACD,G;;;AAGH,eAAe,IAAIlB,aAAJ,EAAf","sourcesContent":["class MoviesService {\n  apiURL = 'http://localhost:4000/movies/';\n\n  fetchMovies = (filter, sort, query) =>\n    fetch(this.buildUrl(filter, sort, query)).then((res) => res.json());\n\n  getMovieById = (movieId) =>\n    fetch(this.apiURL + movieId).then((res) => res.json());\n\n  addMovie = (movie) =>\n    fetch(this.apiURL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(movie),\n    }).then((res) => res.json());\n\n  updateMovie = (movie) =>\n    fetch(this.apiURL, {\n      method: 'PUT',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(movie),\n    });\n\n  deleteMovie = (id) => fetch(this.apiURL + id, { method: 'DELETE' });\n\n  buildUrl = (filter, sort, query) => {\n    let url = `${this.apiURL}?sortBy=${sort}&sortOrder=desc`;\n    if (filter && filter !== 'All') {\n      url += `?filter=${filter}`;\n    }\n    if (query) {\n      url += `&search=${query}&searchBy=title`;\n    }\n    return url;\n  };\n}\n\nexport default new MoviesService();\n"]},"metadata":{},"sourceType":"module"}