{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Field, Form, FormikProvider, ErrorMessage, useFormik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { genresArray, validationSchema, MOVIE_FIELDS } from '../../constants';\n\nvar UpdateMovieDialog = function UpdateMovieDialog(_ref) {\n  _s();\n\n  var movie = _ref.movie,\n      open = _ref.open,\n      onUpdate = _ref.onUpdate,\n      onClose = _ref.onClose;\n\n  var _useState = useState((movie === null || movie === void 0 ? void 0 : movie.genres) || []),\n      _useState2 = _slicedToArray(_useState, 2),\n      genres = _useState2[0],\n      setGenres = _useState2[1];\n\n  var onCloseEditDialog = function onCloseEditDialog() {\n    onClose();\n  };\n\n  var onChangeGenres = function onChangeGenres(value, setFieldValue) {\n    setGenres(value);\n    setFieldValue('genres', value);\n  };\n\n  var formik = useFormik({\n    initialValues: {\n      id: movie === null || movie === void 0 ? void 0 : movie.id,\n      title: movie === null || movie === void 0 ? void 0 : movie.title,\n      release_date: movie === null || movie === void 0 ? void 0 : movie.release_date,\n      poster_path: movie === null || movie === void 0 ? void 0 : movie.poster_path,\n      overview: movie === null || movie === void 0 ? void 0 : movie.overview,\n      runtime: movie === null || movie === void 0 ? void 0 : movie.runtime,\n      genres: genres\n    },\n    validationSchema: validationSchema,\n    values: {\n      genres: genres\n    },\n    onSubmit: function onSubmit(fields) {\n      onUpdate(fields);\n    }\n  });\n  return /*#__PURE__*/React.createElement(FormikProvider, {\n    value: formik\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    disableEscapeKeyDown: true,\n    open: open,\n    onClose: onCloseEditDialog\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    onClick: onCloseEditDialog\n  }, /*#__PURE__*/React.createElement(CloseIcon, null)), /*#__PURE__*/React.createElement(Form, null, /*#__PURE__*/React.createElement(DialogTitle, null, \"Edit Movie\"), /*#__PURE__*/React.createElement(DialogContent, {\n    className: \"dialog-form-content\"\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\"\n  }, \"Movie ID\"), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\",\n    style: {\n      color: 'white'\n    }\n  }, movie === null || movie === void 0 ? void 0 : movie.id), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\"\n  }, \"Title\"), /*#__PURE__*/React.createElement(Field, {\n    name: MOVIE_FIELDS.TITLE,\n    type: \"text\",\n    className: \"edit-field\"\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: MOVIE_FIELDS.TITLE,\n    component: \"div\",\n    className: \"error\"\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\"\n  }, \"Release Date\"), /*#__PURE__*/React.createElement(Field, {\n    name: MOVIE_FIELDS.RELEASE_DATE,\n    type: \"date\",\n    className: \"edit-field\"\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: MOVIE_FIELDS.RELEASE_DATE,\n    component: \"div\",\n    className: \"error\"\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\"\n  }, \"Movie URL\"), /*#__PURE__*/React.createElement(Field, {\n    name: MOVIE_FIELDS.POSTER_PATH,\n    type: \"text\",\n    className: \"edit-field\"\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: MOVIE_FIELDS.POSTER_PATH,\n    component: \"div\",\n    className: \"error\"\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\"\n  }, \"Genre\"), /*#__PURE__*/React.createElement(Select, {\n    type: \"text\",\n    name: MOVIE_FIELDS.GENRES,\n    className: \"edit-field\",\n    value: genres,\n    onChange: function onChange(event) {\n      return onChangeGenres(event.target.value, formik.setFieldValue);\n    },\n    multiple: true\n  }, genresArray.map(function (genre) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: genre,\n      value: genre\n    }, genre);\n  })), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: MOVIE_FIELDS.GENRES,\n    component: \"div\",\n    className: \"error\"\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\"\n  }, \"Overview\"), /*#__PURE__*/React.createElement(Field, {\n    as: \"textarea\",\n    name: MOVIE_FIELDS.OVERVIEW,\n    \"aria-label\": \"empty textarea\",\n    className: \"edit-field\"\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: MOVIE_FIELDS.OVERVIEW,\n    component: \"div\",\n    className: \"error\"\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\"\n  }, \"Runtime\"), /*#__PURE__*/React.createElement(Field, {\n    name: MOVIE_FIELDS.RUNTIME,\n    type: \"number\",\n    className: \"edit-field\"\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: MOVIE_FIELDS.RUNTIME,\n    component: \"div\",\n    className: \"error\"\n  })), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(Button, {\n    onClick: onCloseEditDialog,\n    color: \"secondary\",\n    size: \"large\"\n  }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n    color: \"primary\",\n    size: \"large\",\n    type: \"submit\"\n  }, \"Save\")))));\n};\n\n_s(UpdateMovieDialog, \"raB5fvfx9OZrpYLLfLCsmtbLsag=\", false, function () {\n  return [useFormik];\n});\n\n_c = UpdateMovieDialog;\nUpdateMovieDialog.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    poster_path: PropTypes.string,\n    release_date: PropTypes.string,\n    genres: PropTypes.arrayOf(PropTypes.string),\n    vote_average: PropTypes.number,\n    tagline: PropTypes.string,\n    url: PropTypes.string,\n    vote_count: PropTypes.number,\n    overview: PropTypes.string,\n    budget: PropTypes.number,\n    revenue: PropTypes.number,\n    runtime: PropTypes.number\n  }).isRequired,\n  open: PropTypes.bool.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired\n};\nexport default UpdateMovieDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateMovieDialog\");","map":{"version":3,"sources":["C:/projects/react-trainings/react-movies/src/components/body/movieList/UpdateMovieDialog.js"],"names":["React","useState","Button","Dialog","DialogActions","DialogContent","DialogTitle","IconButton","MenuItem","Select","CloseIcon","Field","Form","FormikProvider","ErrorMessage","useFormik","PropTypes","genresArray","validationSchema","MOVIE_FIELDS","UpdateMovieDialog","movie","open","onUpdate","onClose","genres","setGenres","onCloseEditDialog","onChangeGenres","value","setFieldValue","formik","initialValues","id","title","release_date","poster_path","overview","runtime","values","onSubmit","fields","color","TITLE","RELEASE_DATE","POSTER_PATH","GENRES","event","target","map","genre","OVERVIEW","RUNTIME","propTypes","shape","number","isRequired","string","arrayOf","vote_average","tagline","url","vote_count","budget","revenue","bool","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Field, Form, FormikProvider, ErrorMessage, useFormik } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { genresArray, validationSchema, MOVIE_FIELDS } from '../../constants';\n\nconst UpdateMovieDialog = ({ movie, open, onUpdate, onClose }) => {\n  const [genres, setGenres] = useState(movie?.genres || []);\n  const onCloseEditDialog = () => {\n    onClose();\n  };\n\n  const onChangeGenres = (value, setFieldValue) => {\n    setGenres(value);\n    setFieldValue('genres', value);\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      id: movie?.id,\n      title: movie?.title,\n      release_date: movie?.release_date,\n      poster_path: movie?.poster_path,\n      overview: movie?.overview,\n      runtime: movie?.runtime,\n      genres,\n    },\n    validationSchema,\n    values: {\n      genres,\n    },\n    onSubmit: (fields) => {\n      onUpdate(fields);\n    },\n  });\n\n  return (\n    <FormikProvider value={formik}>\n      <Dialog disableEscapeKeyDown open={open} onClose={onCloseEditDialog}>\n        <IconButton aria-label=\"close\" onClick={onCloseEditDialog}>\n          <CloseIcon />\n        </IconButton>\n        <Form>\n          <DialogTitle>Edit Movie</DialogTitle>\n          <DialogContent className=\"dialog-form-content\">\n            <p className=\"edit-field-name\">Movie ID</p>\n            <p className=\"edit-field-name\" style={{ color: 'white' }}>\n              {movie?.id}\n            </p>\n            <p className=\"edit-field-name\">Title</p>\n            <Field\n              name={MOVIE_FIELDS.TITLE}\n              type=\"text\"\n              className=\"edit-field\"\n            />\n            <ErrorMessage\n              name={MOVIE_FIELDS.TITLE}\n              component=\"div\"\n              className=\"error\"\n            />\n            <p className=\"edit-field-name\">Release Date</p>\n            <Field\n              name={MOVIE_FIELDS.RELEASE_DATE}\n              type=\"date\"\n              className=\"edit-field\"\n            />\n            <ErrorMessage\n              name={MOVIE_FIELDS.RELEASE_DATE}\n              component=\"div\"\n              className=\"error\"\n            />\n            <p className=\"edit-field-name\">Movie URL</p>\n            <Field\n              name={MOVIE_FIELDS.POSTER_PATH}\n              type=\"text\"\n              className=\"edit-field\"\n            />\n            <ErrorMessage\n              name={MOVIE_FIELDS.POSTER_PATH}\n              component=\"div\"\n              className=\"error\"\n            />\n            <p className=\"edit-field-name\">Genre</p>\n            <Select\n              type=\"text\"\n              name={MOVIE_FIELDS.GENRES}\n              className=\"edit-field\"\n              value={genres}\n              onChange={(event) =>\n                onChangeGenres(event.target.value, formik.setFieldValue)\n              }\n              multiple\n            >\n              {genresArray.map((genre) => (\n                <MenuItem key={genre} value={genre}>\n                  {genre}\n                </MenuItem>\n              ))}\n            </Select>\n            <ErrorMessage\n              name={MOVIE_FIELDS.GENRES}\n              component=\"div\"\n              className=\"error\"\n            />\n            <p className=\"edit-field-name\">Overview</p>\n            <Field\n              as=\"textarea\"\n              name={MOVIE_FIELDS.OVERVIEW}\n              aria-label=\"empty textarea\"\n              className=\"edit-field\"\n            />\n            <ErrorMessage\n              name={MOVIE_FIELDS.OVERVIEW}\n              component=\"div\"\n              className=\"error\"\n            />\n            <p className=\"edit-field-name\">Runtime</p>\n            <Field\n              name={MOVIE_FIELDS.RUNTIME}\n              type=\"number\"\n              className=\"edit-field\"\n            />\n            <ErrorMessage\n              name={MOVIE_FIELDS.RUNTIME}\n              component=\"div\"\n              className=\"error\"\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={onCloseEditDialog} color=\"secondary\" size=\"large\">\n              Reset\n            </Button>\n            <Button color=\"primary\" size=\"large\" type=\"submit\">\n              Save\n            </Button>\n          </DialogActions>\n        </Form>\n      </Dialog>\n    </FormikProvider>\n  );\n};\n\nUpdateMovieDialog.propTypes = {\n  movie: PropTypes.shape({\n    id: PropTypes.number.isRequired,\n    title: PropTypes.string.isRequired,\n    poster_path: PropTypes.string,\n    release_date: PropTypes.string,\n    genres: PropTypes.arrayOf(PropTypes.string),\n    vote_average: PropTypes.number,\n    tagline: PropTypes.string,\n    url: PropTypes.string,\n    vote_count: PropTypes.number,\n    overview: PropTypes.string,\n    budget: PropTypes.number,\n    revenue: PropTypes.number,\n    runtime: PropTypes.number,\n  }).isRequired,\n  open: PropTypes.bool.isRequired,\n  onUpdate: PropTypes.func.isRequired,\n  onClose: PropTypes.func.isRequired,\n};\n\nexport default UpdateMovieDialog;\n"]},"metadata":{},"sourceType":"module"}