{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Field, Form, FormikProvider, ErrorMessage, useFormik } from 'formik';\nimport PropTypes from 'prop-types';\nimport { genresArray, validationSchema, MOVIE_FIELDS } from '../constants';\n\nvar AddMovieDialog = function AddMovieDialog(_ref) {\n  _s();\n\n  var open = _ref.open,\n      onAdd = _ref.onAdd,\n      onClose = _ref.onClose;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      genres = _useState2[0],\n      setGenres = _useState2[1];\n\n  var onCloseAddDialog = function onCloseAddDialog() {\n    onClose();\n  };\n\n  var onChangeGenres = function onChangeGenres(value, setFieldValue) {\n    setGenres(value);\n    setFieldValue('genres', value);\n  };\n\n  var formik = useFormik({\n    initialValues: {\n      title: '',\n      release_date: '',\n      poster_path: '',\n      genres: genres,\n      overview: '',\n      runtime: ''\n    },\n    validationSchema: validationSchema,\n    values: {\n      genres: genres\n    },\n    onSubmit: function onSubmit(values) {\n      onAdd(values);\n    }\n  });\n  return /*#__PURE__*/React.createElement(FormikProvider, {\n    value: formik\n  }, /*#__PURE__*/React.createElement(Dialog, {\n    disableBackdropClick: true,\n    disableEscapeKeyDown: true,\n    open: open,\n    onClose: onCloseAddDialog\n  }, /*#__PURE__*/React.createElement(IconButton, {\n    \"aria-label\": \"close\",\n    onClick: onCloseAddDialog\n  }, /*#__PURE__*/React.createElement(CloseIcon, null)), /*#__PURE__*/React.createElement(Form, {\n    title: \"add-movie\",\n    onSubmit: formik.handleSubmit\n  }, /*#__PURE__*/React.createElement(DialogTitle, {\n    id: \"alert-dialog-title\"\n  }, \"Add Movie\"), /*#__PURE__*/React.createElement(DialogContent, {\n    className: \"dialog-form-content\"\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\"\n  }, \"Title\"), /*#__PURE__*/React.createElement(Field, {\n    type: \"text\",\n    name: MOVIE_FIELDS.TITLE,\n    placeholder: \"Movie Title\",\n    className: \"edit-field\",\n    title: \"title\",\n    \"data-testid\": \"title\"\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: MOVIE_FIELDS.TITLE,\n    component: \"div\",\n    className: \"error\"\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\"\n  }, \"Release Date\"), /*#__PURE__*/React.createElement(Field, {\n    type: \"date\",\n    name: MOVIE_FIELDS.RELEASE_DATE,\n    placeholder: \"Select Date\",\n    className: \"edit-field\",\n    title: \"release_date\",\n    \"data-testid\": \"release_date\"\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: MOVIE_FIELDS.RELEASE_DATE,\n    component: \"div\",\n    className: \"error\"\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\"\n  }, \"Movie URL\"), /*#__PURE__*/React.createElement(Field, {\n    type: \"text\",\n    name: MOVIE_FIELDS.POSTER_PATH,\n    placeholder: \"Movie URL here\",\n    className: \"edit-field\",\n    title: \"poster_path\",\n    \"data-testid\": \"poster_path\"\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: MOVIE_FIELDS.POSTER_PATH,\n    component: \"div\",\n    className: \"error\"\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\"\n  }, \"Genre\"), /*#__PURE__*/React.createElement(Select, {\n    type: \"text\",\n    name: MOVIE_FIELDS.GENRES,\n    className: \"edit-field\",\n    value: genres,\n    onChange: function onChange(event) {\n      return onChangeGenres(event.target.value, formik.setFieldValue);\n    },\n    multiple: true,\n    title: \"genres\",\n    \"data-testid\": \"genres\"\n  }, genresArray.map(function (genre) {\n    return /*#__PURE__*/React.createElement(MenuItem, {\n      key: genre,\n      value: genre\n    }, genre);\n  })), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: MOVIE_FIELDS.GENRES,\n    component: \"div\",\n    className: \"error\"\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\"\n  }, \"Overview\"), /*#__PURE__*/React.createElement(Field, {\n    as: \"textarea\",\n    name: MOVIE_FIELDS.OVERVIEW,\n    placeholder: \"Overview Here\",\n    className: \"edit-field\",\n    title: \"overview\",\n    \"data-testid\": \"overview\"\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: MOVIE_FIELDS.OVERVIEW,\n    component: \"div\",\n    className: \"error\"\n  }), /*#__PURE__*/React.createElement(\"p\", {\n    className: \"edit-field-name\"\n  }, \"Runtime\"), /*#__PURE__*/React.createElement(Field, {\n    type: \"number\",\n    name: MOVIE_FIELDS.RUNTIME,\n    placeholder: \"Runtime Here\",\n    className: \"edit-field\",\n    title: \"runtime\",\n    \"data-testid\": \"runtime\"\n  }), /*#__PURE__*/React.createElement(ErrorMessage, {\n    name: MOVIE_FIELDS.RUNTIME,\n    component: \"div\",\n    className: \"error\"\n  })), /*#__PURE__*/React.createElement(DialogActions, null, /*#__PURE__*/React.createElement(Button, {\n    onClick: onCloseAddDialog,\n    color: \"secondary\",\n    size: \"large\",\n    title: \"reset\"\n  }, \"Reset\"), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    color: \"primary\",\n    size: \"large\",\n    \"data-testid\": \"submit\"\n  }, \"Submit\")))));\n};\n\n_s(AddMovieDialog, \"Upv7TsTz0jI7KVZtclyVr66TNkc=\", false, function () {\n  return [useFormik];\n});\n\n_c = AddMovieDialog;\nAddMovieDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onAdd: PropTypes.func.isRequired\n};\nexport default AddMovieDialog;\n\nvar _c;\n\n$RefreshReg$(_c, \"AddMovieDialog\");","map":{"version":3,"sources":["C:/projects/react-trainings/react-movies/src/components/header/AddMovieDialog.js"],"names":["React","useState","Button","Dialog","DialogActions","DialogContent","DialogTitle","IconButton","MenuItem","Select","CloseIcon","Field","Form","FormikProvider","ErrorMessage","useFormik","PropTypes","genresArray","validationSchema","MOVIE_FIELDS","AddMovieDialog","open","onAdd","onClose","genres","setGenres","onCloseAddDialog","onChangeGenres","value","setFieldValue","formik","initialValues","title","release_date","poster_path","overview","runtime","values","onSubmit","handleSubmit","TITLE","RELEASE_DATE","POSTER_PATH","GENRES","event","target","map","genre","OVERVIEW","RUNTIME","propTypes","bool","isRequired","func"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\n\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Select from '@material-ui/core/Select';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { Field, Form, FormikProvider, ErrorMessage, useFormik } from 'formik';\nimport PropTypes from 'prop-types';\n\nimport { genresArray, validationSchema, MOVIE_FIELDS } from '../constants';\n\nconst AddMovieDialog = ({ open, onAdd, onClose }) => {\n  const [genres, setGenres] = useState([]);\n\n  const onCloseAddDialog = () => {\n    onClose();\n  };\n\n  const onChangeGenres = (value, setFieldValue) => {\n    setGenres(value);\n    setFieldValue('genres', value);\n  };\n\n  const formik = useFormik({\n    initialValues: {\n      title: '',\n      release_date: '',\n      poster_path: '',\n      genres,\n      overview: '',\n      runtime: '',\n    },\n    validationSchema,\n    values: {\n      genres,\n    },\n    onSubmit: (values) => {\n      onAdd(values);\n    },\n  });\n\n  return (\n    <FormikProvider value={formik}>\n      <Dialog\n        disableBackdropClick\n        disableEscapeKeyDown\n        open={open}\n        onClose={onCloseAddDialog}\n      >\n        <IconButton aria-label=\"close\" onClick={onCloseAddDialog}>\n          <CloseIcon />\n        </IconButton>\n        <Form title=\"add-movie\" onSubmit={formik.handleSubmit}>\n          <DialogTitle id=\"alert-dialog-title\">Add Movie</DialogTitle>\n          <DialogContent className=\"dialog-form-content\">\n            <p className=\"edit-field-name\">Title</p>\n            <Field\n              type=\"text\"\n              name={MOVIE_FIELDS.TITLE}\n              placeholder=\"Movie Title\"\n              className=\"edit-field\"\n              title=\"title\"\n              data-testid=\"title\"\n            />\n            <ErrorMessage\n              name={MOVIE_FIELDS.TITLE}\n              component=\"div\"\n              className=\"error\"\n            />\n            <p className=\"edit-field-name\">Release Date</p>\n            <Field\n              type=\"date\"\n              name={MOVIE_FIELDS.RELEASE_DATE}\n              placeholder=\"Select Date\"\n              className=\"edit-field\"\n              title=\"release_date\"\n              data-testid=\"release_date\"\n            />\n            <ErrorMessage\n              name={MOVIE_FIELDS.RELEASE_DATE}\n              component=\"div\"\n              className=\"error\"\n            />\n            <p className=\"edit-field-name\">Movie URL</p>\n            <Field\n              type=\"text\"\n              name={MOVIE_FIELDS.POSTER_PATH}\n              placeholder=\"Movie URL here\"\n              className=\"edit-field\"\n              title=\"poster_path\"\n              data-testid=\"poster_path\"\n            />\n            <ErrorMessage\n              name={MOVIE_FIELDS.POSTER_PATH}\n              component=\"div\"\n              className=\"error\"\n            />\n            <p className=\"edit-field-name\">Genre</p>\n            <Select\n              type=\"text\"\n              name={MOVIE_FIELDS.GENRES}\n              className=\"edit-field\"\n              value={genres}\n              onChange={(event) =>\n                onChangeGenres(event.target.value, formik.setFieldValue)\n              }\n              multiple\n              title=\"genres\"\n              data-testid=\"genres\"\n            >\n              {genresArray.map((genre) => (\n                <MenuItem key={genre} value={genre}>\n                  {genre}\n                </MenuItem>\n              ))}\n            </Select>\n            <ErrorMessage\n              name={MOVIE_FIELDS.GENRES}\n              component=\"div\"\n              className=\"error\"\n            />\n            <p className=\"edit-field-name\">Overview</p>\n            <Field\n              as=\"textarea\"\n              name={MOVIE_FIELDS.OVERVIEW}\n              placeholder=\"Overview Here\"\n              className=\"edit-field\"\n              title=\"overview\"\n              data-testid=\"overview\"\n            />\n            <ErrorMessage\n              name={MOVIE_FIELDS.OVERVIEW}\n              component=\"div\"\n              className=\"error\"\n            />\n            <p className=\"edit-field-name\">Runtime</p>\n            <Field\n              type=\"number\"\n              name={MOVIE_FIELDS.RUNTIME}\n              placeholder=\"Runtime Here\"\n              className=\"edit-field\"\n              title=\"runtime\"\n              data-testid=\"runtime\"\n            />\n            <ErrorMessage\n              name={MOVIE_FIELDS.RUNTIME}\n              component=\"div\"\n              className=\"error\"\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button\n              onClick={onCloseAddDialog}\n              color=\"secondary\"\n              size=\"large\"\n              title=\"reset\"\n            >\n              Reset\n            </Button>\n            <Button\n              type=\"submit\"\n              color=\"primary\"\n              size=\"large\"\n              data-testid=\"submit\"\n            >\n              Submit\n            </Button>\n          </DialogActions>\n        </Form>\n      </Dialog>\n    </FormikProvider>\n  );\n};\n\nAddMovieDialog.propTypes = {\n  open: PropTypes.bool.isRequired,\n  onClose: PropTypes.func.isRequired,\n  onAdd: PropTypes.func.isRequired,\n};\n\nexport default AddMovieDialog;\n"]},"metadata":{},"sourceType":"module"}