{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(getAllMovies),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(getMovie),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(addMovie),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(updateMovie),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(deleteMovie),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(moviesSagas);\n\n// eslint-disable-next-line import/no-extraneous-dependencies\nimport 'regenerator-runtime/runtime';\nimport { call, put, takeEvery } from 'redux-saga/effects';\nimport MoviesService from '../services/MoviesService';\nimport { getMovieSuccess, getMovieFail } from './actions/header';\nimport { loadMoviesSuccess, loadMoviesFail, addMovieSuccess, addMovieFail, updateMovieSuccess, updateMovieFail, deleteMovieSuccess, deleteMovieFail } from './actions/movies';\nimport { LOAD_MOVIES, ADD_MOVIE, DELETE_MOVIE, UPDATE_MOVIE, GET_MOVIE_BY_ID } from './actions/types';\n\nfunction getAllMovies(_ref) {\n  var filter, sort, query, movies;\n  return _regeneratorRuntime.wrap(function getAllMovies$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          filter = _ref.filter, sort = _ref.sort, query = _ref.query;\n          _context.prev = 1;\n          _context.next = 4;\n          return call(MoviesService.fetchMovies, filter, sort, query);\n\n        case 4:\n          movies = _context.sent;\n          _context.next = 7;\n          return put(loadMoviesSuccess(movies.data));\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](1);\n          _context.next = 13;\n          return put(loadMoviesFail(_context.t0.message));\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[1, 9]]);\n}\n\nfunction getMovie(_ref2) {\n  var movieId, movie;\n  return _regeneratorRuntime.wrap(function getMovie$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          movieId = _ref2.movieId;\n          _context2.prev = 1;\n          _context2.next = 4;\n          return call(MoviesService.getMovieById, movieId);\n\n        case 4:\n          movie = _context2.sent;\n          _context2.next = 7;\n          return put(getMovieSuccess(movie));\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](1);\n          _context2.next = 13;\n          return put(getMovieFail(_context2.t0.message));\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[1, 9]]);\n}\n\nfunction addMovie(_ref3) {\n  var movie, addedMovie;\n  return _regeneratorRuntime.wrap(function addMovie$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          movie = _ref3.movie;\n          _context3.prev = 1;\n          _context3.next = 4;\n          return call(MoviesService.addMovie, movie);\n\n        case 4:\n          addedMovie = _context3.sent;\n          _context3.next = 7;\n          return put(addMovieSuccess(addedMovie));\n\n        case 7:\n          _context3.next = 13;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](1);\n          _context3.next = 13;\n          return put(addMovieFail(_context3.t0.message));\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[1, 9]]);\n}\n\nfunction updateMovie(_ref4) {\n  var movie;\n  return _regeneratorRuntime.wrap(function updateMovie$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          movie = _ref4.movie;\n          _context4.prev = 1;\n          _context4.next = 4;\n          return call(MoviesService.updateMovie, movie);\n\n        case 4:\n          _context4.next = 6;\n          return put(updateMovieSuccess(movie));\n\n        case 6:\n          _context4.next = 12;\n          break;\n\n        case 8:\n          _context4.prev = 8;\n          _context4.t0 = _context4[\"catch\"](1);\n          _context4.next = 12;\n          return put(updateMovieFail(_context4.t0.message));\n\n        case 12:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4, null, [[1, 8]]);\n}\n\nfunction deleteMovie(_ref5) {\n  var id;\n  return _regeneratorRuntime.wrap(function deleteMovie$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          id = _ref5.id;\n          _context5.prev = 1;\n          _context5.next = 4;\n          return call(MoviesService.deleteMovie, id);\n\n        case 4:\n          _context5.next = 6;\n          return put(deleteMovieSuccess(id));\n\n        case 6:\n          _context5.next = 12;\n          break;\n\n        case 8:\n          _context5.prev = 8;\n          _context5.t0 = _context5[\"catch\"](1);\n          _context5.next = 12;\n          return put(deleteMovieFail(_context5.t0.message));\n\n        case 12:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5, null, [[1, 8]]);\n}\n\nfunction moviesSagas() {\n  return _regeneratorRuntime.wrap(function moviesSagas$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeEvery(LOAD_MOVIES, getAllMovies);\n\n        case 2:\n          _context6.next = 4;\n          return takeEvery(ADD_MOVIE, addMovie);\n\n        case 4:\n          _context6.next = 6;\n          return takeEvery(UPDATE_MOVIE, updateMovie);\n\n        case 6:\n          _context6.next = 8;\n          return takeEvery(DELETE_MOVIE, deleteMovie);\n\n        case 8:\n          _context6.next = 10;\n          return takeEvery(GET_MOVIE_BY_ID, getMovie);\n\n        case 10:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default moviesSagas;","map":{"version":3,"sources":["C:/projects/react-trainings/react-movies/src/store/sagas.js"],"names":["getAllMovies","getMovie","addMovie","updateMovie","deleteMovie","moviesSagas","call","put","takeEvery","MoviesService","getMovieSuccess","getMovieFail","loadMoviesSuccess","loadMoviesFail","addMovieSuccess","addMovieFail","updateMovieSuccess","updateMovieFail","deleteMovieSuccess","deleteMovieFail","LOAD_MOVIES","ADD_MOVIE","DELETE_MOVIE","UPDATE_MOVIE","GET_MOVIE_BY_ID","filter","sort","query","fetchMovies","movies","data","message","movieId","getMovieById","movie","addedMovie","id"],"mappings":"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","sourcesContent":["// eslint-disable-next-line import/no-extraneous-dependencies\nimport 'regenerator-runtime/runtime';\n\nimport { call, put, takeEvery } from 'redux-saga/effects';\n\nimport MoviesService from '../services/MoviesService';\n\nimport { getMovieSuccess, getMovieFail } from './actions/header';\nimport {\n  loadMoviesSuccess,\n  loadMoviesFail,\n  addMovieSuccess,\n  addMovieFail,\n  updateMovieSuccess,\n  updateMovieFail,\n  deleteMovieSuccess,\n  deleteMovieFail,\n} from './actions/movies';\nimport {\n  LOAD_MOVIES,\n  ADD_MOVIE,\n  DELETE_MOVIE,\n  UPDATE_MOVIE,\n  GET_MOVIE_BY_ID,\n} from './actions/types';\n\nfunction* getAllMovies({ filter, sort, query }) {\n  try {\n    const movies = yield call(MoviesService.fetchMovies, filter, sort, query);\n    yield put(loadMoviesSuccess(movies.data));\n  } catch (e) {\n    yield put(loadMoviesFail(e.message));\n  }\n}\n\nfunction* getMovie({ movieId }) {\n  try {\n    const movie = yield call(MoviesService.getMovieById, movieId);\n    yield put(getMovieSuccess(movie));\n  } catch (e) {\n    yield put(getMovieFail(e.message));\n  }\n}\nfunction* addMovie({ movie }) {\n  try {\n    const addedMovie = yield call(MoviesService.addMovie, movie);\n    yield put(addMovieSuccess(addedMovie));\n  } catch (e) {\n    yield put(addMovieFail(e.message));\n  }\n}\n\nfunction* updateMovie({ movie }) {\n  try {\n    yield call(MoviesService.updateMovie, movie);\n    yield put(updateMovieSuccess(movie));\n  } catch (e) {\n    yield put(updateMovieFail(e.message));\n  }\n}\n\nfunction* deleteMovie({ id }) {\n  try {\n    yield call(MoviesService.deleteMovie, id);\n    yield put(deleteMovieSuccess(id));\n  } catch (e) {\n    yield put(deleteMovieFail(e.message));\n  }\n}\n\nfunction* moviesSagas() {\n  yield takeEvery(LOAD_MOVIES, getAllMovies);\n  yield takeEvery(ADD_MOVIE, addMovie);\n  yield takeEvery(UPDATE_MOVIE, updateMovie);\n  yield takeEvery(DELETE_MOVIE, deleteMovie);\n  yield takeEvery(GET_MOVIE_BY_ID, getMovie);\n}\n\nexport default moviesSagas;\n"]},"metadata":{},"sourceType":"module"}